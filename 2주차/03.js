/*
    단축 속성명 : property shorthand
    const name = "nbc"
    const age = "30"
    key - value
    const obj = {
        name, // 생략이 된 것
        age, // 키랑 밸류가 똑같으면 생략할 수 있음
    };
    전개 구문 (spread operator) : ...을 사용
        destructuring과 함께 가장 많이 사용되는 es6 문법 중 하나!
        let arr = [1, 2, 3];
        console.log(arr);
        console.log(...arr);

        ...을 붙히게 되면 배열을 벗고 다른 속성을 주겠다 라는 의미
        그래서 결과 값이 배열 형태니까 원래는 []안에 입력 값이 출력되지만,
        ...을 붙힘으로써 배열의 형태가 사라지고 안에 있는 요소들만 출력 됨

        전개해서 쓰려고 하는데 다른 값을 출력하려고 한다면
        새로운 변수 안에 배열을 만들고 기존에 있던 배열에 [...arr, 추가할 값]을
        입력하게 된다면, 결국 let arr = [1, 2, 3]과 let newArr = [...arr, 추가할 값]은 동일한 것

        객체도 배열과 같이 쓰일 수 있음(... 스프레드 구문으로)
            let user = {
                name: "nbc",
                age: 30,
            };

            let user2 = { ...user};
        결과 값은 같은 값이 출력 됨
    ==============================================================================================    
    나머지 매개 변수(rest parameter) : ...args 사용
        function exampleFunc (a, b, c){
            console.log(a, b, c)
        }
        위에 같이 함수를 이용한 변수를 이용할 때, a, b, c의 값을 출력하지만,
        남은 매개 변수의 이름을 모를 때 매개변수 안에 ...args 라는 매개 변수를 넣어서
        출력 값에 쓰인 남은 변수들도 나타날 수 있게 해 줌
        function number (a, b, c, ...args) {
            console.log(a, b, c);
            console.log(...args);
        }
        number(1, 2, 3, 4) 의 결과 값 >> 1 2 3 4가 출력됨
        만약, ...스프레드를 빼고 args만 사용 했을 때는
        남은 매개 변수의 값이 배열 형태로 출력 됨 >> 1 2 3 [4]

        console.log(a, b, c, ...args) < 이렇게 출력할 시 붙어서 출력이 됨
        number(1, 2, 3, 4) >> 1 2 3 4
        
        # 나머지 매개 변수를 가져오고 싶을 때 꼭 ... 스프레드를 사용해서 ...args 라고 매개 변수에 입력 해야만
        나머지가 출력 됨 !
    ====================================================================================================
    템플릿 리터럴 (Template Literal) `${}`
        : ``(백틱)을 사용하여, 추가하고 싶은 값을 `${}` << 로 이용해서 값을 할당해 주는 것
            console.log(`Hello World ${3+3}`) >> 라고 했을 때는 Hello World 6의 결과 값이 나옴
            
            할당 해야하는 변수를 `${}` 안에 넣을 수 있음!
            const test = "하세요!";
            console.log(`안녕${test}`);
            >> 안녕하세요! 로 출력

            ``(백틱)은 멀티 라인을 지원함
            console.log(`
                안녕하세요
                    반갑습니다
            `)
            >> 이게 바로 출력이 됨 ``(백틱)을 사용하였기 때문에
*/
